{"ast":null,"code":"var _jsxFileName = \"/Users/armeenrashidian/Documents/GitHub/ResumeTrackerApp/FrontEnd/src/components/PDFDocument/PDFDocument.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport PropTypes from 'prop-types';\nimport './PDFDocument.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PDFDocument = ({\n  inputFile\n}) => {\n  _s();\n\n  const [numberPages, setNumberPages] = useState(null);\n  const [file, setFile] = useState(null);\n  pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\n  const onDocumentLoadSuccess = ({\n    numPages\n  }) => {\n    setNumberPages(numPages);\n  };\n\n  const reader = new FileReader();\n\n  try {\n    reader.readAsDataURL(inputFile);\n  } catch (err) {\n    console.log(err);\n  }\n\n  reader.onloadend = () => {\n    setFile(reader.result);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pdf-container\",\n    children: /*#__PURE__*/_jsxDEV(Document, {\n      file: file,\n      onLoadSuccess: onDocumentLoadSuccess,\n      children: Array.from({\n        length: numberPages\n      }, (v, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Page, {\n          pageNumber: i + 1,\n          style: {\n            width: '300px',\n            orientation: 'portrait'\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), i !== numberPages - 1 && /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PDFDocument, \"/2LGPnpa+sfT0AsGoOsc7FIOhpI=\");\n\n_c = PDFDocument;\nPDFDocument.propTypes = {\n  inputFile: PropTypes.shape({\n    lastModified: PropTypes.number,\n    name: PropTypes.string,\n    size: PropTypes.number,\n    type: PropTypes.string,\n    webkitRelativePath: PropTypes.string\n  }).isRequired\n};\nexport default PDFDocument;\n\nvar _c;\n\n$RefreshReg$(_c, \"PDFDocument\");","map":{"version":3,"sources":["/Users/armeenrashidian/Documents/GitHub/ResumeTrackerApp/FrontEnd/src/components/PDFDocument/PDFDocument.jsx"],"names":["React","useState","Document","Page","pdfjs","PropTypes","PDFDocument","inputFile","numberPages","setNumberPages","file","setFile","GlobalWorkerOptions","workerSrc","version","onDocumentLoadSuccess","numPages","reader","FileReader","readAsDataURL","err","console","log","onloadend","result","Array","from","length","v","i","width","orientation","propTypes","shape","lastModified","number","name","string","size","type","webkitRelativePath","isRequired"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,KAAzB,QAAsC,WAAtC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,oBAAP;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAAA;;AACrC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,IAAD,CAAhC;AAEAG,EAAAA,KAAK,CAACQ,mBAAN,CAA0BC,SAA1B,GAAuC,2CAA0CT,KAAK,CAACU,OAAQ,gBAA/F;;AAEA,QAAMC,qBAAqB,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAkB;AAC9CP,IAAAA,cAAc,CAACO,QAAD,CAAd;AACD,GAFD;;AAIA,QAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACA,MAAI;AACFD,IAAAA,MAAM,CAACE,aAAP,CAAqBZ,SAArB;AACD,GAFD,CAEE,OAAOa,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AAEDH,EAAAA,MAAM,CAACM,SAAP,GAAmB,MAAM;AACvBZ,IAAAA,OAAO,CAACM,MAAM,CAACO,MAAR,CAAP;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,2BACE,QAAC,QAAD;AACE,MAAA,IAAI,EAAEd,IADR;AAEE,MAAA,aAAa,EAAEK,qBAFjB;AAAA,gBAIGU,KAAK,CAACC,IAAN,CAAW;AAAEC,QAAAA,MAAM,EAAEnB;AAAV,OAAX,EAAoC,CAACoB,CAAD,EAAIC,CAAJ,kBACnC;AAAA,gCACE,QAAC,IAAD;AAAc,UAAA,UAAU,EAAEA,CAAC,GAAG,CAA9B;AAAiC,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE,OAAT;AAAkBC,YAAAA,WAAW,EAAE;AAA/B;AAAxC,WAAWF,CAAX;AAAA;AAAA;AAAA;AAAA,gBADF,EAEGA,CAAC,KAAMrB,WAAW,GAAG,CAArB,iBAA4B;AAAA;AAAA;AAAA;AAAA,gBAF/B;AAAA;AAAA;AAAA;AAAA;AAAA,cADD;AAJH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CApCD;;GAAMF,W;;KAAAA,W;AAsCNA,WAAW,CAAC0B,SAAZ,GAAwB;AACtBzB,EAAAA,SAAS,EAAEF,SAAS,CAAC4B,KAAV,CAAgB;AACzBC,IAAAA,YAAY,EAAE7B,SAAS,CAAC8B,MADC;AAEzBC,IAAAA,IAAI,EAAE/B,SAAS,CAACgC,MAFS;AAGzBC,IAAAA,IAAI,EAAEjC,SAAS,CAAC8B,MAHS;AAIzBI,IAAAA,IAAI,EAAElC,SAAS,CAACgC,MAJS;AAKzBG,IAAAA,kBAAkB,EAAEnC,SAAS,CAACgC;AALL,GAAhB,EAMRI;AAPmB,CAAxB;AAUA,eAAenC,WAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport PropTypes from 'prop-types';\nimport './PDFDocument.scss';\n\nconst PDFDocument = ({ inputFile }) => {\n  const [numberPages, setNumberPages] = useState(null);\n  const [file, setFile] = useState(null);\n\n  pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\n  const onDocumentLoadSuccess = ({ numPages }) => {\n    setNumberPages(numPages);\n  };\n\n  const reader = new FileReader();\n  try {\n    reader.readAsDataURL(inputFile);\n  } catch (err) {\n    console.log(err);\n  }\n\n  reader.onloadend = () => {\n    setFile(reader.result);\n  };\n\n  return (\n    <div className=\"pdf-container\">\n      <Document\n        file={file}\n        onLoadSuccess={onDocumentLoadSuccess}\n      >\n        {Array.from({ length: numberPages }, (v, i) => (\n          <div>\n            <Page key={i} pageNumber={i + 1} style={{ width: '300px', orientation: 'portrait' }} />\n            {i !== (numberPages - 1) && (<br />)}\n          </div>\n        ))}\n      </Document>\n    </div>\n  );\n};\n\nPDFDocument.propTypes = {\n  inputFile: PropTypes.shape({\n    lastModified: PropTypes.number,\n    name: PropTypes.string,\n    size: PropTypes.number,\n    type: PropTypes.string,\n    webkitRelativePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default PDFDocument;\n"]},"metadata":{},"sourceType":"module"}